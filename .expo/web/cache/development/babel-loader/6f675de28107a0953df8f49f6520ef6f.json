{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/eranp/projects/wewash2/wewash/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons, FontAwesome } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport BottomTabNavigator from \"./navigation/BottomTabNavigator\";\nimport useLinking from \"./navigation/useLinking\";\nvar Stack = createStackNavigator();\nimport * as firebase from 'firebase';\nimport * as Facebook from 'expo-facebook';\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAwXiw2bWkR6sT7108EPPCNeBkkixEtAEw\",\n  authDomain: \"wewash-cb69f.firebaseapp.com\",\n  databaseURL: \"https://wewash-cb69f.firebaseio.com\",\n  projectId: \"wewash-cb69f\",\n  storageBucket: \"wewash-cb69f.appspot.com\",\n  messagingSenderId: \"247131740049\"\n};\nfirebase.initializeApp(firebaseConfig);\nfirebase.auth().onAuthStateChanged(function (user) {\n  if (user != null) {\n    console.log(\"We are authenticated now!\");\n  }\n});\n\nfunction loginWithFacebook() {\n  var _await$Facebook$logIn, type, token, credential;\n\n  return _regeneratorRuntime.async(function loginWithFacebook$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Facebook.initializeAsync(''));\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Facebook.logInWithReadPermissionsAsync({\n            permissions: ['public_profile']\n          }));\n\n        case 4:\n          _await$Facebook$logIn = _context.sent;\n          type = _await$Facebook$logIn.type;\n          token = _await$Facebook$logIn.token;\n\n          if (type === 'success') {\n            credential = firebase.auth.FacebookAuthProvider.credential(token);\n            firebase.auth().signInWithCredential(credential).catch(function (error) {});\n          }\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function App(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      initialNavigationState = _React$useState4[0],\n      setInitialNavigationState = _React$useState4[1];\n\n  var containerRef = React.useRef();\n\n  var _useLinking = useLinking(containerRef),\n      getInitialState = _useLinking.getInitialState;\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              SplashScreen.preventAutoHide();\n              firebase.initializeApp(firebaseConfig);\n              _context2.t0 = setInitialNavigationState;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(getInitialState());\n\n            case 6:\n              _context2.t1 = _context2.sent;\n              (0, _context2.t0)(_context2.t1);\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({}, Ionicons.font, {\n                'space-mono': require(\"./assets/fonts/SpaceMono-Regular.ttf\")\n              })));\n\n            case 10:\n              _context2.next = 15;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t2 = _context2[\"catch\"](0);\n              console.warn(_context2.t2);\n\n            case 15:\n              _context2.prev = 15;\n              setLoadingComplete(true);\n              SplashScreen.hide();\n              return _context2.finish(15);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 12, 15, 19]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, Platform.OS === 'ios' && React.createElement(StatusBar, {\n      barStyle: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 35\n      }\n    }), React.createElement(FontAwesome.Button, {\n      name: \"facebook\",\n      backgroundColor: \"#3b5998\",\n      onPress: this.loginWithFacebook,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, \"Login with Facebook\"), React.createElement(NavigationContainer, {\n      ref: containerRef,\n      initialState: initialNavigationState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, React.createElement(Stack.Navigator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, React.createElement(Stack.Screen, {\n      name: \"Root\",\n      component: BottomTabNavigator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }))));\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"sources":["/Users/eranp/projects/wewash2/wewash/App.js"],"names":["React","SplashScreen","Font","Ionicons","FontAwesome","NavigationContainer","createStackNavigator","BottomTabNavigator","useLinking","Stack","firebase","Facebook","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","initializeApp","auth","onAuthStateChanged","user","console","log","loginWithFacebook","initializeAsync","logInWithReadPermissionsAsync","permissions","type","token","credential","FacebookAuthProvider","signInWithCredential","catch","error","App","props","useState","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","useRef","getInitialState","useEffect","loadResourcesAndDataAsync","preventAutoHide","loadAsync","font","require","warn","hide","skipLoadingScreen","styles","container","Platform","OS","StyleSheet","create","flex","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform, StatusBar, StyleSheet, View } from 'react-native';\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons, FontAwesome } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n\nimport BottomTabNavigator from './navigation/BottomTabNavigator';\nimport useLinking from './navigation/useLinking';\n\nconst Stack = createStackNavigator();\n\nimport * as firebase from 'firebase';\nimport * as Facebook from 'expo-facebook';\n\n// Optionally import the services that you want to use\n//import \"firebase/auth\";\n//import \"firebase/database\";\n//import \"firebase/firestore\";\n//import \"firebase/functions\";\n//import \"firebase/storage\";\n\n// Initialize Firebase\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAwXiw2bWkR6sT7108EPPCNeBkkixEtAEw\",\n    authDomain: \"wewash-cb69f.firebaseapp.com\",\n    databaseURL: \"https://wewash-cb69f.firebaseio.com\",\n    projectId: \"wewash-cb69f\",\n    storageBucket: \"wewash-cb69f.appspot.com\",\n    messagingSenderId: \"247131740049\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n// Listen for authentication state to change.\nfirebase.auth().onAuthStateChanged((user) => {\n    if (user != null) {\n        console.log(\"We are authenticated now!\");\n    }\n\n    // Do other things\n});\n\nasync function loginWithFacebook() {\n    await Facebook.initializeAsync('');\n\n    const { type, token } = await Facebook.logInWithReadPermissionsAsync(\n        { permissions: ['public_profile'] }\n    );\n\n    if (type === 'success') {\n        // Build Firebase credential with the Facebook access token.\n        const credential = firebase.auth.FacebookAuthProvider.credential(token);\n\n        // Sign in with credential from the Facebook user.\n        firebase.auth().signInWithCredential(credential).catch((error) => {\n            // Handle Errors here.\n        });\n    }\n}\n\n\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const { getInitialState } = useLinking(containerRef);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHide();\n        firebase.initializeApp(firebaseConfig);\n\n          // Load our initial navigation state\n        setInitialNavigationState(await getInitialState());\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hide();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return (\n      <View style={styles.container}>\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n          <FontAwesome.Button name=\"facebook\" backgroundColor=\"#3b5998\" onPress={this.loginWithFacebook}>\n              Login with Facebook\n          </FontAwesome.Button>\n        <NavigationContainer ref={containerRef} initialState={initialNavigationState}>\n          <Stack.Navigator>\n            <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}